~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Для запуска проекта в системе необходимо наличие python3 и docker-compose:
1)Переходим в директорию проекта и переносим все миграции проекта с помощью команд - 
	docker-compose run web python manage.py makemigrations
	docker-compose run web python manage.py migrate
2)Инициализируем бд базовыми значениями:
	docker-compose run web python manage.py loaddata mydata.json
3)Создаём суперюзера для админ панели :
	docker-compose run web python manage.py createsuperuser
4)Запускаем проект с помощью команды :
	docker-compose up 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Для решения задачи использовал субд psql, а также Django framework и только его инструменты(орм,шаблонизатор,формы,автотесты).
Архитектуру предпочёл построить таким образом : 
Т.к. по заданию было описано по сути два разных вида продуктов - 1й из них продаётся по количеству, второй по весу, я решил создать отдельную таблицу, в которой записал три разных типа продажи товаров. Три, потому что если на товар полагается какая то "скидка", то помимо скидки просто за количество и  возможной скидки по весу также существует вид скидки "получи что-то на халяву". В данном виде скидки, если пользователь покупает какое то кол-во этого товара - он получает какое то кол-во какого то одного из существующих товаров. Таким образом у меня вышла таблица Sell_types, в которой я добавил три типа:
1 - Per quantity(продажа по количеству за штуку)
2 - Per kg(продажа по кол-ву за кг)
3 - Something free(продажа по количеству за штуку, но если есть скидка на этот товар - пользователь получит что-то бесплатно.)

Далее существует таблица Goods. В которой хранится информация о товаре - его название(unique),цена за 1 единицу(если тип продажи 1 или 3 - за одну штуку,если тип продажи 2 - за 1 кг) и сам тип, по которому товар продаётся(обязательный класс пренадлежности со стороны товара).

Далее существуют ещё три таблицы - каждая из них привязана к определённому типу товара:
1)Per_count - в этой таблице хранится информация о скидках на товары, которые продаются по-штучно(good - имя товара, discount_quantity -  количество единиц, которое нужно купить для получение скидки, а также price_quantity - скидочная стоимость на то самое кол-во товара)

2)Per_kg - то же самое, что и таблица 1, только для 2го типа продажи.
Поля : good,discount_kg,price_kg

3)Smth_free - таблица хранит в себе информацию о скидках на товары 3го типа продажи. good - Имя товара(unique), quantity_to_get - количество единиц данного товара, которое надо получить для преобритения, item - товар, n количество которого покупатель получит за приобретение этого good, а также item_quantity - кол-во того item, который пользователь получит бесплатно. 

Для возможности добавления\изменения товаров, а также их скидок использовал django-admin, не кастомизировал его.
Для того чтобы установить скидку на товар N необходимо : 
1)Добавить товар в таблице Goods, выбрав ему необходимый тип продажи. 
2)Добавить в зависимости от установленного типа продажи в необходимую таблицу скидку на него.

Касательно view проекта:
Всего есть три страницы.
Первая - стартовая. При нажатии на кнопку осуществляется переход на вторую страницу
Вторая - Страница самого "супермаркета". Как и было описано в задании использовал select для выбора продукта.Пользователь выбирает необходимый ему продукт - затем нажимает "select product" и появляется вторая форма, в которой он вводит количество единиц\кг товара.Далее, после ввода необходимого кол-ва данного товара пользователь нажимает кнопку "add to my cart". После чего его редиректит опять же на страницу супермаркета. Таким образом, пользователь может "ходить по супермаркету и класть в корзину столько товаров, сколько хочет."
Третья - Страница корзины пользователя. В ней пользователь может убрать то, что он положил в корзину, или оплатить покупки. 
Товары, которые пользователь кладёт в корзину на протяжении всей сессии - хранятся в бд до оплаты. Далее, при нажатии кнопки "Pay", пользователь отправляет запрос на оплату и перед ним появляется форма, в которой написано  количество каждого уникального товара, который он купил, а также сумму за него и total_price - общая сумма за все покупки. Если пользователь передумал - он может нажать кнопку back, затем удалить из корзины всё, что он решил не приобретать и снова оплатить. При нажатии кнопки continue - "покупатель оплачивает свои покупки и корзина аннулируется."
Все ф-ии, работающие с бд  описаны в модуле models приложения market. 
Для подсчёта суммы за определённое кол-во товара в данном модуле описаны ф-ии per_count_algorithm,per_kg_algorithm,smth_free_algorithm. Для подсчёта общей суммы покупки из корзины - ф-я have_to_pay(). Именно эти ф-ии тестируются одним тестом в модуле tests приложения market. 

В целом, это всё.Достаточно интересное тестовое задание, рад, что получил возможность поработать над задачкой такого рода) Надеюсь, оправдал ожидания, если они были:D

